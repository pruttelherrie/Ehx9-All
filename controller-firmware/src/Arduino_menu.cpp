/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "Arduino_menu.h"
#include "ThemeCoolBlueTraditional.h"
#include "Amiga4Ever8pt7b.h"

// Global variable declarations

const  ConnectorLocalInfo applicationInfo = { "Ehx9-All", "3f4f3435-5be0-47c3-859a-596eff3791fc" };
TFT_eSPI tft;
TfteSpiDrawable tftDrawable(&tft, 10);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &tftDrawable);

// Global Menu Item declarations

const AnalogMenuInfo minfoSettingsMIDIChannel = { "MIDI channel", 12, 0xffff, 15, onSettingsMIDIChannel, 0, 1, "" };
AnalogMenuItem menuSettingsMIDIChannel(&minfoSettingsMIDIChannel, 0, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const SubMenuInfo minfoSettings = { "Settings", 11, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsMIDIChannel);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, NULL);
const AnyMenuInfo minfoStoreAll = { "Store All", 10, 0xffff, 0, onStoreAll };
ActionMenuItem menuStoreAll(&minfoStoreAll, &menuSettings);

AnalogMenuInfo minfoCtrl2 = { "123456789012", 9, 0xffff, 100, onCtrl2, 0, 1, "" }; // stored in RAM!
AnalogMenuItem menuCtrl2(&minfoCtrl2, 0, &menuStoreAll);
AnalogMenuInfo minfoCtrl1 = { "123456789012", 8, 0xffff, 100, onCtrl1, 0, 1, "" }; // stored in RAM!
AnalogMenuItem menuCtrl1(&minfoCtrl1, 0, &menuCtrl2);
const AnalogMenuInfo minfoEffect = { "Effect", 7, 0xffff, 100, onEffect, 0, 1, "" };
AnalogMenuItem menuEffect(&minfoEffect, 0, &menuCtrl1);
const AnalogMenuInfo minfoDry = { "Dry", 6, 0xffff, 100, onDry, 0, 1, "" };
AnalogMenuItem menuDry(&minfoDry, 0, &menuEffect);

ScrollChoiceMenuItem menuProgram(1, fnProgramRtCall, 0, 9, &menuDry);
const char enumStrPedal_0[] = "SYNTH9";
const char enumStrPedal_1[] = "MEL9";
const char enumStrPedal_2[] = "BASS9";
const char enumStrPedal_3[] = "C9";
const char enumStrPedal_4[] = "B9";
const char enumStrPedal_5[] = "KEY9";
const char* const enumStrPedal[]  = { enumStrPedal_0, enumStrPedal_1, enumStrPedal_2, enumStrPedal_3, enumStrPedal_4, enumStrPedal_5 };
const EnumMenuInfo minfoPedal = { "Pedal", 4, 0xffff, 5, onPedal, enumStrPedal };
EnumMenuItem menuPedal(&minfoPedal, 0, &menuProgram);

RENDERING_CALLBACK_NAME_INVOKE(fnNameRtCall, textItemRenderFn, "Name", -1, onName)
TextMenuItem menuName(fnNameRtCall, 2, 11, &menuPedal);

const AnalogMenuInfo minfoPreset = { "Preset", 3, 2, 31, onPreset, 1, 1, "" };
AnalogMenuItem menuPreset(&minfoPreset, 0, &menuName);
const AnyMenuInfo minfoPRESET = { "BACK", 1, 0xffff, 0, onPresetMode };
ActionMenuItem menuPRESET(&minfoPRESET, &menuPreset);

// Set up code

void setupMenu() {
    tft.begin();
    tft.setRotation(1);
    tft.initDMA();
    renderer.setUpdatesPerSecond(10);
    //switches.initialise(internalDigitalIo(), true);
    menuMgr.initForEncoder(&renderer, &menuPRESET, PC13, PA10, PC15); 
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(true);
    installCoolBlueTraditionalTheme(renderer, MenuFontDef(nullptr, 4), MenuFontDef(nullptr, 4), true);
    //installCoolBlueTraditionalTheme(renderer, MenuFontDef(&FreeSans9pt7b, 1), MenuFontDef(&FreeSans9pt7b, 1), true);
}
